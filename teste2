import { compareDocumentPosition } from "domutils";

function assaabloy() {
  createAssaabloiSession()
    .then(session => {
      const dataForKey = {
        doorOperations: [
          {
            doors: ['4'],
            operation: "guest"
          }
        ],
        expireTime: getISOStringWithoutZoneDesignator('2021-04-15'),
        format: "rfid48"
      };

      cardOps(dataForKey, session);
    })
}

function createAssaabloiSession() {
  return new Promise((resolve, reject) => {
    assaabloySession(assaabloySettings.credentials)
      .then(session => {
        resolve(session);
      })
      .catch(() => {
        reject();
      });
  });
}

function assaabloySession(data) {
  return new Promise((resolve, reject) => {
    axios
      .post("http://localhost:8080/api/v1/sessions", data, {
        headers: {
          "Content-Type": "application/json; charset=UTF-8",
          "X-Aah-Date": new Date().toUTCString(),
          "Content-MD5": getContentAsBase64EncondedMD5Hash(data)
        }
      })
      .then(response => {
        resolve(response.data);
      })
      .catch(error => reject(error));
  });
}

function cardOps(data, session) {
  const date = new Date().toUTCString();
  const encodedData = getContentAsBase64EncondedMD5Hash(data);
  const encoder = localStorage.getItem("settings.addressEncoder") || "Encoder";
  const queryParams = sortQueryParams(
    `action=encode&encoder=${encoder}&overwriteValidCard=true&autoJoin=true`
  );
  const resourcePath = `/api/v1/cards?${queryParams}`;

  return new Promise((resolve, reject) => {
    const authParams = [
      "POST",
      encodedData,
      "application/json; charset=UTF-8",
      "",
      `X-Aah-Date:${date}`,
      resourcePath
    ];

    const auth = createAssaabloyAuthorization(session, authParams);
    axios
      .post(`http://localhost:8080${resourcePath}`, data, {
        headers: {
          "Content-Type": "application/json; charset=UTF-8",
          "X-Aah-Date": date,
          "Content-MD5": encodedData,
          Authorization: auth
        }
      })
      .then(response => {
        resolve(response);
      })
      .catch(error => reject(error));
  });
}

function getContentAsBase64EncondedMD5Hash(body) {
  let md5checksum = CryptoJS.MD5(JSON.stringify(body));
  let base64value = CryptoJS.enc.Base64.stringify(md5checksum);
  return base64value;
}

function getISOStringWithoutZoneDesignator(dateString) {
  const date = new Date(dateString);
  return date.toISOString().slice(0, -1);
}

function sortQueryParams(paramString) {
  return paramString
    .split("&")
    .sort()
    .join("&");
}

function createAssaabloyAuthorization(session, authorization) {
  const signature = CryptoJS.HmacSHA1(authorization.join(`\n`), session.accessKey);
  const signatureBase64 = CryptoJS.enc.Base64.stringify(signature);

  return `AWS ${session.id}:${signatureBase64}`;
}
